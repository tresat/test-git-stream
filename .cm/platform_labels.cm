# -*- mode: yaml -*-
manifest:
  version: 1.0

# The `automations` section lists automations to run on PRs in this repository.
# Each automation has an `if` key that defines conditions to run the automation,
# as well as a `run` key with the actions to do. All the conditions need to be true
# for the actions to run (there is an implicit AND relation between
# the conditions on each line).  Each condition is specified as a Jinja expression.  You
# can also use the constant `true` if you want to always run the actions.

# Each automation is independent of the others.  Every time one of the `on` conditions match for
# this PR, this automations will have its `if` checked to run.  In a way, the `on` conditions
# function as an implicit first `if` for every automation in the file.

# You can define multiple automations in a .cm file, but each automation name should be unique
# within the file.  We keep each automation (or very closely related group of automations) in
# its own file.

on:
  - pr_created
  - commit

automations:

  # just to not be first
  dummy_label:
    if:
      - {{ true }}
    run:
      - action: add-label@v1
        args:
          label: 'dummy'
          color: 'E94637'

  # just to not be first
  {% for platform in platforms %}
  sample_comment_{{ platform.name }}:
    if:
      - true
    run:
      - action: add-comment@v1
        args:
          comment: |
            Looped 4: {{ branch.diff.files_metadata | groupByPlatformMap | getStatFromMap(platform.name, 'files') }}
  {% endfor %}

# To simplify the automations section, some calculations are placed under unique YAML keys defined here.
# Read the "|" not as "or", but as a "pipe", taking the output of the previous command and passing it to the next command.

stats_gen: {{ branch.diff.files_metadata | groupByPlatform | computeStatistics(branch.diff.files_metadata) }}
files_jvm: {{ stats_gen | getStatisticForGroup('jvm', 'name') }}
files_bt_ge_build_cache: {{ stats_gen | getStatisticForGroup('files_bt_ge_build_cache', 'name') }}

byPlatform: {{ branch.diff.files_metadata | groupByPlatformMap }}
byPlatformJvmFiles: {{ branch.diff.files_metadata | groupByPlatformMap | getStatFromMap('jvm', 'files') }}

# Keys like `- build_infrastructure:` do not mean anything, they just need to be unique
# The `name:` field specifies the platform label, e.g. `name: build_infrastructure` => `platform:build_infrastructure` label
platforms:
  - bt_ge_build_cache:
    name: 'bt_ge_build_cache'
  - jvm:
    name: 'jvm'

author:
  using_gitstream: {{ (pr.author | isEnabledUser ) }}
