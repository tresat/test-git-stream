# -*- mode: yaml -*-
manifest:
  version: 1.0

# The `automations` section lists automations to run on PRs in this repository.
# Each automation has an `if` key that defines conditions to run the automation,
# as well as a `run` key with the actions to do. All the conditions need to be true
# for the actions to run (there is an implicit AND relation between
# the conditions on each line).  Each condition is specified as a Jinja expression.  You
# can also use the constant `true` if you want to always run the actions.

# Each automation is independent of the others.  Every time a PR is opened or changed,
# the conditions are evaluated and the actions are executed one by one in order
# if all the conditions pass.  You can define multiple automations in a .cm file, but
# each automation name should be unique within the file.

automations:

  # Add the a:documentation label to docs-only changes
  docs_only:
    if:
      - {{ author.using_gitstream }}
      - {{ is.docs }}
    run:
      - action: add-label@v1
        args:
          label: 'a:documentation'
  # Add the a:chore label and auto-approve formatting-only changes
  formatting_only:
    if:
      - {{ author.using_gitstream }}
      - {{ is.formatting }}
    run:
      - action: add-label@v1
        args:
          label: 'a:chore'
      - action: approve@v1

  # Get the platform owners
  get_platform_owners:
    if:
      - {{ author.using_gitstream }}
    run:
      - action: add-label@v1
        args:
          label: 'Owned by: ' + {{ files | codeowners(pr, env.REPO_READ_TOKEN) }}

  # Call out PRs that change the build script (and will be longer to checkout and review)
  label_build_script_change:
    if:
      - {{ author.using_gitstream }}
      - {{ is.build_script_change }}
    run:
      - action: add-label@v1
        args:
          label: 'build-script-change'
          color: 'E94637'

# To simplify the automations section, some calculations are placed under unique YAML keys defined here.
# Read the "|" not as "or", but as a "pipe", taking the output of the previous command and passing it to the next command.

# The results of these calculations are assigned to `is.formatting`, `is.docs` and `is.tests`.
is:
  formatting: {{ source.diff.files | isFormattingChange }}
  docs: {{ (files | allDocs) or (files | match(regex=r/\.adoc$/) | every) }} # This won't catch a mix of .adoc and non .adoc changes, see: https://github.com/linear-b/gitstream/issues/93
  tests: {{ files | allTests }}

  # Exclude anything under samples/snippets sourceSets, or any sort of test resource file
  build_script_change: {{ files | reject(regex=r/.*\/src\/(samples|snippets)\//) | reject(regex=r/.*\/(crossVersionTest|docsTest|functionalTest|integTest|smokeTest|test|testFixtures)\/resources\//) | match(list=build_logic_files) | some }}

build_logic_files:
  - 'build.gradle.kts'
  - 'build.gradle'
  - 'settings.gradle.kts'
  - 'settings.gradle'

author:
  using_gitstream: {{ (pr.author | isEnabledUser ) }}
